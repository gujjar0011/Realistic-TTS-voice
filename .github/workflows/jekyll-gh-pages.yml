# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced TTS - Eleven Labs Style</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Advanced Text-to-Speech</h1>
        <div class="input-section">
            <textarea id="text-input" placeholder="Enter your text here..."></textarea>
        </div>
        <div class="controls">
            <label for="language">Language:</label>
            <select id="language">
                <option value="hi">Hindi</option>
                <option value="en">English</option>
            </select>
            <label for="voice">Voice:</label>
            <select id="voice">
                <option value="male">Male</option>
                <option value="female">Female</option>
            </select>
            <label for="speed">Speed:</label>
            <input type="range" id="speed" min="0.5" max="2" step="0.1" value="1">
            <span id="speed-value">1.0x</span>
        </div>
        <div class="buttons">
            <button id="convert-btn">Convert to Speech</button>
            <button id="download-btn">Download Audio</button>
        </div>
        <div class="output-section">
            <audio id="audio-output" controls></audio>
        </div>
    </div>
    <script src="script.js"></script>
</body>
</html>

/* General Styles */
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f9;
    color: #333;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    width: 90%;
    max-width: 600px;
    text-align: center;
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
}

/* Input Section */
.input-section textarea {
    width: 100%;
    height: 150px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    resize: none;
}

/* Controls Section */
.controls {
    margin: 20px 0;
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    justify-content: center;
}

.controls label {
    font-weight: bold;
}

.controls select, .controls input {
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.controls input[type="range"] {
    width: 100px;
}

#speed-value {
    font-weight: bold;
}

/* Buttons Section */
.buttons {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 20px;
}

.buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: #fff;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.buttons button:hover {
    background-color: #0056b3;
}

/* Output Section */
.output-section audio {
    width: 100%;
    margin-top: 20px;
}
document.getElementById('convert-btn').addEventListener('click', async () => {
    const text = document.getElementById('text-input').value;
    const language = document.getElementById('language').value;
    const voice = document.getElementById('voice').value;
    const speed = document.getElementById('speed').value;

    if (!text) {
        alert("Please enter some text!");
        return;
    }

    // Send request to backend
    const response = await fetch('/convert', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `text=${encodeURIComponent(text)}&language=${language}&voice=${voice}&speed=${speed}`,
    });

    if (response.ok) {
        const audioBlob = await response.blob();
        const audioUrl = URL.createObjectURL(audioBlob);
        const audioElement = document.getElementById('audio-output');
        audioElement.src = audioUrl;
        audioElement.play();
    } else {
        alert("Error converting text to speech!");
    }
});

document.getElementById('download-btn').addEventListener('click', () => {
    const audioElement = document.getElementById('audio-output');
    if (audioElement.src) {
        const link = document.createElement('a');
        link.href = audioElement.src;
        link.download = 'output.mp3';
        link.click();
    } else {
        alert("No audio available to download!");
    }
});

document.getElementById('speed').addEventListener('input', (e) => {
    document.getElementById('speed-value').textContent = `${e.target.value}x`;
});
